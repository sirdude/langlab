inherit option "/std/options";
inherit "/std/backend";

int usage() {
	write("\tusage: compile [Options] [FILENAME]\n\n");
	write("This application uses our reusable compiler code to build ");
	write("a translator from\n");
	write("standard bnf to the syntax we use internally.");
	write("  Our second application will\n");
	write("translate the other direction.\n");
	write("\n");
	write("If filename is present load that file and parse it.  If not,\n");
	write("start excepting input from stdin, use ^F to exit.\n\n");

	print_options();

	return 1;
}

int main(string str) {
	int done, x, i;
	string tfile, *cmds;

	done = 0;

	option::add_option("debug", "Enable debugging mode.", "");
	option::add_option("help", "Print this usage message.", "");
	option::add_option("names",
		"Use ident names in stats not just the word ident.", "");
	option::add_option("output", "Set the output file.", "FILE");
	option::add_option("xml", "Use xml format for output", "");
	option::add_option("human", "Use a human readable format for output", "");
	option::add_option("json", "Use json format for output", "");

	set_eof("^F");

	str = option::parse_options(str);

	if (option::query_option("debug")) {
		set_debug(1);
	}

	if (option::query_option("help")) {
		return usage();
	}

	if (!option::query_option("output")) {
		set_option("output", "a.out.c");
	}
	open_output(option::query_option("output"));

	init_backend(keywords);

	debug("Begin Parsing.");

	if (str && str != "") {
		cmds = explode(str, " ");
		i = sizeof(cmds);
	} else {
		cmds = ({});
		i = 0;
	}
	x = 0;
	while (x < i) {
		write("Reading " + cmds[x] + "\n");
		read_compfile(cmds[x]);
		done = 1;
		x = x + 1;
	}

	if (!done) {
		write("Entering interactive mode. Use " + get_eof() +
			" to end.\n");
		read_compfile("");
	}

	close_output();

	debug("End Parsting.");

	if (query_option("json")) {
		print_tokens("json");
	} else if (query_option("xml")) {
		print_tokens("xml");
	} else {
		print_tokens("human");
	}

	write_stats("stats.txt");

	return 1;
}

void setup(void) {
	set_id("compiler");
	set_gettable(1);

	add_action("main", "compile");
	set_short("A compiler");
	set_long("Give it a try if you dare.  Type compile --help for usage");
	set_weight(1);
	set_value(1);
}
