mapping options;

int add_option(string flag, string help, string setable) {
	if (!options) {
		options = ([]);
	}

	if (!mappingp(options[flag])) {
		options[flag] = ([]);
	}

	options[flag]["help"] = help;
	options[flag]["value"] = 0;
	if (setable && setable != "") {
		options[flag]["setable"] = setable;
	}

	return 1;
}

int set_option(string flag, mixed value) {
	if (!options) {
		options = ([]);
	}

	if (member_map(flag, options)) {
		options[flag]["value"] = value;
		return 1;
	}

	write("Option: " + flag + " does not exist.\n");
	return 0;
}

mixed query_option(string flag) {
	if (!options) {
		options = ([]);
	}

	if (member_map(flag, options)) {
		return options[flag]["value"];
	}

	write("Option: " + flag + " does not exist.\n");
	return 0;
}

string query_help_option(string flag) {
	if (!options) {
		options = ([]);
	}

	if (member_map(flag, options)) {
		if (member_map("help", options[flag])) {
			return options[flag]["help"];
		} else {
			return "Undefined help str.\n";
		}

	}
	write("Option: " + flag + " does not exist.\n");
	return "";
}

int print_options() {
	int c, i ,maxi;
	string st, *keys;

	write("Options:\n");

	if (!options) {
		options = ([]);
	}

	keys = map_indices(options);
	maxi = sizeof(keys);
	i = 0;
	while (i < maxi) {
		if (member_map("setable", options[keys[i]])) {
			st = sprintf("\t%-20s %s\n", "--" + keys[i] + "=" +
				options[keys[i]]["setable"],
				options[keys[i]]["help"]);
			write(st);
		} else {
			st = sprintf("\t%-20s %s\n", "--" + keys[i] + "=",
				options[keys[i]]["help"]);
			write(st);
		}
		i = i + 1;
	}
	return i;
}

int is_space(string str) {
	if ((str == " ") || (str == "\t") || (str == "\n") ||
		(str == "\r")) {
		return 1;
	}
	return 0;
}

string parse_options(string args) {
	int x, y, maxx, done, t;
	string args2, prop, value;

	x = 0;
	maxx = strlen(args);
	args2 = "";
	while (x<maxx) {
		if (is_space(args[x..x])) {
			args2 += args[x..x];
			x = x + 1;
		} else if (args[x..x] == "\"") {
			args2 += args[x..x];
			x = x + 1;
			done = 0;
			while (!done) {
				while (args[x..x] != "\"" && (x < maxx)) {
					args2 += args[x..x];
					x = x + 1;
					done = 1;
				}
				y = x -1;
				if (args[y..y] == "\\") { 
					done = 0;
				}
			}
			args2 += args[x..x];
			x = x + 1;
		} else if (args[x..x] == "-") {
			t = x;
			x = x + 1;

			done = 0;
			if (args[x..x] != "-") {
				x = x -1;
				write("invalid optinon \"-\" at " + x + "\n");
				return "0";
			} else {
				x = x + 1;
			}

			if (x >= maxx) {
				done=1;
			}

			prop = "";
			while(!done && (args[x..x] != " ") &&
				(args[x..x] != "=")) {
				prop = prop + args[x..x];
				x = x + 1;

				if (x >= maxx) {
					done=1;
				}
			}
			if (!done && args[x..x] == "=") {
				x = x + 1;
				value = "";

				if (args[x..x] == "\"") {
					done = 0;
					y = x - 1;
					while (!done && (args[y..x] != "\"") &&
						(args[y..y] != "\"")) {
						value = value + args[x..x];
						x = x + 1;
						if (x >= maxx) {
							done=1;
						}
					}
				} else {
					done = 0;
					while (!done && (args[x..x] != " ")) {
						value = value + args[x..x];
						x = x + 1;
						if (x >= maxx) {
							done=1;
						}
					}
				}
				if (!set_option(prop, value)) {
					return "0";
				}
			} else {
				if (!set_option(prop, 1)) {
					return "0";
				}
			}
		} else {
			if (x >= maxx) {
				done = 1;
			}

			while (!done && args[x..x] != " ") {
				args2 += args[x..x];
				x = x + 1;
				if (x >= maxx) {
					done = 1;
				}
			}
		}
	}

	return args2;
}

