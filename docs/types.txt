
Closer to data you can get the better.
What are the key datatypes we want to represent:
File
Process
Grammar's
	Supported BNF features,   *,+,.,NULL
	Template matching and actions...

AST
	What do we want globally for all nodes.
	How to define a node and what node dependant stuff we have.
	How to define actions on a node?
	How to walk the tree.
hash
	what options supported: one-many, one-one, paramater tuning?
	What are the operators? sorting? reference vs copy?
Array
string  can we make a string a specialized array?
numbers
	int, float, bool, percision vs storage?



constants/typedefs/includes/inherits/modules/libraries...
Our langage supports the following Types:
void	For functions that do not have a return value
mixed 	Signal to turn off type checking or if want to use week types/autoconversion

char 	Single characture can use numbers to represent in different formats see below dec assumes ascii
string 	Array of chars?
alias   Set an ident to a specific value should use before code?
enumeration Make a set of specific values (Don't like...)

Numbers: at compile time can set bounds on these?
bool       1 | 0   1 is true; 0 is false
int        a positive or negitive number with no fractional bit.
float      lookupsize
double 	   lookupsize
complex    lookup 
html       use this style: &#222;
oct        use this style: \2222;
hex        use this style: 0x22;
unicode    use this style: U+2222;
binary     use this style: 0b1111;

array 
struct use objects?
object
hash
sets   just add set functions to arrays?
variable
function
program?
process?
packages/libs/includes?
linked lists, queues, stacks, heaps, sets, trees, graphs
searches: depth first, breadth first, a*, quicksort, bubblesort, etc.
statemancines, fuzzy logic, message passing, agents



Others:
buitlin types:
lpc: nil, string, int, float, object, array, mapping, mixed
c: int, long, char, float, double, long double, array  (and various versions of long, int), struct
fortran: int, real, complex(imaginary numbers), boolean, string(character)
java: boolean, char, byte, short, int, long, float and double, classes, interfaces, arrays
haskell: bool, string, char, lists, tuples, function, Io, unit,class, monad
ocaml: int, float, boolean, characters, string, tupple, array, list, records, variants
	functions can be passed around so they are kind of a type...
perl: scarlar, array, hash,
	handles numbers as: integer, float, complex, hex, octal automatically
	handles strings as "" or ''
	additional: enum, module, package, grammar, 
python: str, int, float, complex, list, tuple, range, dict(hash), set, bool, bytes, bytearray
ruby: numbers, boolean, strings, hashes, arrays, symbols(char)
rust: int, flata, boolean, string, tupple, array, has utfstring(can't index a utfstring)
go: bool, string, int(various flavors), byte, float, complex, array, struct, pointers, slices, maps, functions,
	channels(unlocked bydirectional stream), also has interface(similar to mixed in dgd,
		assumes its like an undefined class?)
lua: nil, boolean, number, string, userdata, function, thread and table
swift: int, double, float, bool, string, array, set, dictionary, tuple, optional

extra thoughts: machine data types, c will let you do int64 and the compiler will adjust based on system
		bignum  allows you to create values beyond limits but it costs
		linked list, queue, stack, heap, tree, pointers, references, graph
		pointers, references in java...

What kinds of benifits to do you get to builtin types?
hide details but allow speed if needed... short, int32 etc...
less is more.
need to be able to convert between types.
What metadata is stored for each type or can be computed...

perl's string functions:
	chomp (also works on arrays) removes endoflines
	chop removes last char
	char(NUMBER) returns ascii code for a number char(65) = 'A'; reverse is ord...
	ord(CHAR) returns the ascii number for a letter
        crypt(string1, string2);
	index(strin, substr, postion)  returns first occuerrence of substring postion is optional...
	rindex(string,substring,postion)
	join(string, array)
	lc(string)
	lcfirst(string)
	length(string)
	split(pattern, string, limit);
	substr(string, offset, length);
	uc(string)
	ucfirst(string)
	eval(string)
	q/STRING/;		allow you to not escape quotes.
	qq/STRING/;		allow you to not escape quotes.
	concatination
	cmp(string1, string2)


booleans and sets probably work well togeather
also boolean and numbers work well togeather

java boolean ops:
	==, !=, >, <, >=, <=, &&, ||, !   (~, ^, &, |, <<, >>, are bit operators)

sizeof, length, exists, defined, typeof, isint, ...
	push, pop, append, prepend, clone, 
hash: values, keys, foreach, each( returns key & value for each item), delete, sorting...
set operators: union, intersection, difference, inanotb, boolean ops...
	members, numbermembers, inset, notinset, test for empty

regex functinos: match, search(returns index vs matching), replace, split, test(test for match don't return match)
	does the string match?
	how many matches are there?
	what is the first match?
	what are all of the matches?
	replace all matches
	split the string
	use ~ instead of // for regex?   need to figure out vs bit operator though...
	

templating? generating code via templates
