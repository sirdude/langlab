	PURPOSE						WHERE
 \	Escape the next character			Always, except when
							escaped by another \
 ^	Match the beginning of the string		Not in []
	(or line, if /m is used)
 ^	Complement the [] class				At the beginning of []
 .	Match any single character except newline	Not in []
	(under /s, includes newline)
 $	Match the end of the string			Not in [], but can
	(or before newline at the end of the		mean interpolate a
	string; or before any newline if /m is		scalar
	used)
 |	Alternation					Not in []
 ()	Grouping					Not in []
 [	Start Bracketed Character class			Not in []
 ]	End Bracketed Character class			Only in [], and not first
 *	Matches the preceding element 0 or more		Not in []
	times
 +	Matches the preceding element 1 or more		Not in []
	times
 ?	Matches the preceding element 0 or 1		Not in []
	times
 {	Starts a sequence that gives number(s)		Not in []
	of times the preceding element can be matched
 {	When following certain escape sequences
	starts a modifier to the meaning of the sequence
 }	End sequence started by {
 -	Indicates a range				Only in [] interior
 #	Beginning of comment, extends to line end	Only with /x modifier

\\	The backslash character
\0n	The character with octal value 0n (0 <= n <= 7)
\0nn	The character with octal value 0nn (0 <= n <= 7)
\0mnn	The character with octal value 0mnn (0 <= m <= 3, 0 <= n <= 7)
\xhh	The character with hexadecimal value 0xhh
\uhhhh	The character with hexadecimal value 0xhhhh
\t	The tab character ('\u0009')
\n	The newline (line feed) character ('\u000A')
\r	The carriage-return character ('\u000D')
\f	The form-feed character ('\u000C')
\a	The alert (bell) character ('\u0007')
\e	The escape character ('\u001B')
\cx	The control character corresponding to x
\d	A digit: [0-9]
\D	A non-digit: [^0-9]
\s	A whitespace character: [ \t\n\x0B\f\r]
\S	A non-whitespace character: [^\s]
\w	A word character: [a-zA-Z_0-9]
\W	A non-word character: [^\w]
\p{Lower}	A lower-case alphabetic character: [a-z]
\p{Upper}	An upper-case alphabetic character:[A-Z]
\p{ASCII}	All ASCII:[\x00-\x7F]
\p{Alpha}	An alphabetic character:[\p{Lower}\p{Upper}]
\p{Digit}	A decimal digit: [0-9]
\p{Alnum}	An alphanumeric character:[\p{Alpha}\p{Digit}]
\p{Punct}	Punctuation: One of !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
\p{Graph}	A visible character: [\p{Alnum}\p{Punct}]
\p{Print}	A printable character: [\p{Graph}\x20]
\p{Blank}	A space or a tab: [ \t]
\p{Cntrl}	A control character: [\x00-\x1F\x7F]
\p{XDigit}	A hexadecimal digit: [0-9a-fA-F]
\p{Space}	A whitespace character: [ \t\n\x0B\f\r]
\p{InGreek}	A character in the Greek block (simple block)
\p{Lu}	An uppercase letter (simple category)
\p{Sc}	A currency symbol
\P{InGreek}	Any character except one in the Greek block (negation)
[\p{L}&&[^\p{Lu}]] 	Any letter except an uppercase letter (subtraction)

RE		::=	union | simplere ;
union		::=	RE "|" simplere ;
simplere	::=	concat | basicre ;
concat		::=	simplere basicre ;
basicre		::=	star | plus | elementaryre ;
star		::=	elementaryre "*" ;
plus		::=	elementaryre "+" ;
elementaryre	::=	group | any | eos | char | set ;
group		::=	"(" RE ")" ;
any		::=	"." ;
eos		::=	"$" ;
set		::=	positive-set | negative-set ;
positive-set	::=	"[" set-items "]" ;
negative-set	::=	"[^" set-items "]" ;
set-items	::=	set-item | set-item set-items ;
set-item	::=	range | char ;
range		::=	char "-" char ;
char		::=	validchar | "\" metachar ; 
metachar	::= "d" | "D" | "s" | "S" | "w" | "W" | "p" | "x" | "0" | "u";
metachar	::= "t" | "n" | "r" | "f" | "a" | "e" | "c";
validchar	::=	ascii(000) - asci(127) ; # could just say single char
